import{C as y,u as p,x as u}from"./index-Bey__kGK.js";const b=y("post",{state:()=>({posts:[],loading:!1,error:null,total:0,currentPage:1,itemsPerPage:5,filters:{searchTerm:"",course:"",cycle:"",authorRole:""}}),actions:{async uploadPost(r,e){this.loading=!0,this.error=null;const o=p();if(!o.user){this.error="Debes iniciar sesión para publicar.",this.loading=!1,alert(this.error);return}const a=o.user.id,s="publications";let c=null,n=null;try{if(e){const l=e.name.split(".").pop(),h=`${Date.now()}-${Math.random().toString(36).substring(2,9)}.${l}`,f=`${a}/${h}`;console.log(`Subiendo archivo principal a: ${s}/${f}`);const{data:g,error:d}=await u.storage.from(s).upload(f,e);if(d)throw new Error(`Error al subir el archivo principal: ${d.message}`);console.log("Archivo principal subido con éxito:",g);const{data:m}=u.storage.from(s).getPublicUrl(f);c=m.publicUrl,n=l,console.log("--- URL GENERADA PARA EL ARCHIVO PRINCIPAL ---:",c)}else console.warn("No main file selected for upload.");console.log("Insertando publicación en la base de datos...");const{data:t,error:i}=await u.from("posts").insert({user_id:a,title:r.title,course:r.course,cycle:r.cycle,file_url:c,file_type:n,thumbnail_url:r.thumbnail_url}).select(`
            *,
            users (
              email,
              alias,
              role,
              avatar_url
            )
          `).single();if(i)throw new Error(`Error al insertar la publicación en la DB: ${i.message}`);return console.log("Publicación insertada con éxito:",t),await this.fetchPosts(),alert("¡Publicación creada con éxito!"),t}catch(t){this.error=t.message,console.error("Error al subir la publicación:",t.message),alert(`Error al subir la publicación: ${t.message}`)}finally{this.loading=!1}},async fetchPosts(r={}){var t;this.loading=!0,this.error=null;const{page:e=1,reset:o=!0,searchTerm:a=this.filters.searchTerm,course:s=this.filters.course,cycle:c=this.filters.cycle,authorRole:n=this.filters.authorRole}=r;try{const i=(e-1)*this.itemsPerPage,l=((t=p().user)==null?void 0:t.id)||null,{data:h,error:f}=await u.rpc("get_posts_with_ratings_paginated",{p_user_id:l,p_limit:this.itemsPerPage,p_offset:i,p_search_term:a||null,p_course:s||null,p_cycle:c||null,p_author_role:n||null});if(f)throw f;this.posts=h.posts||[],this.total=h.total||0,this.currentPage=e,this.filters={searchTerm:a,course:s,cycle:c,authorRole:n}}catch(i){this.error=i.message,console.error("Error fetching posts:",i)}finally{this.loading=!1}},async applyFilters(r={}){return this.fetchPosts({...r,reset:!0})},async loadMorePosts(){if(!(this.posts.length>=this.total))return this.fetchPosts({page:this.currentPage+1})},async clearFilters(){return this.applyFilters({searchTerm:"",course:"",cycle:""})},async fetchAllCoursesByCycleData(){try{const{data:r,error:e}=await u.from("courses_by_cycle").select("course_name, cycle_name");if(e)throw e;this.allCoursesByCycleData=r||[];const o=new Set(r.map(s=>s.course_name).filter(Boolean)),a=new Set(r.map(s=>s.cycle_name).filter(Boolean));this.courses=Array.from(o).sort(),this.cycles=Array.from(a).sort()}catch(r){console.error("Error fetching all courses by cycle data:",r.message),this.error="Error al cargar datos de cursos y ciclos."}},async fetchUniqueCourses(){try{const{data:r,error:e}=await u.from("courses_by_cycle").select("course_name",{distinct:!0});if(e)throw e;this.courses=r.map(o=>o.course_name).filter(Boolean).sort()}catch(r){console.error("Error fetching unique courses from courses_by_cycle:",r.message),this.error="Error al cargar los cursos."}},async fetchUniqueCycles(){try{this.cycles=Array.from({length:10},(r,e)=>`CICLO ${e+1}`)}catch(r){console.error("Error setting fixed cycles:",r.message),this.error="Error al cargar los ciclos."}},async updatePost(r,e){var o,a;this.loading=!0,this.error=null;try{const c=(o=p().user)==null?void 0:o.id,{data:n,error:t}=await u.from("posts").select("id, user_id").eq("id",r).single();if(t||!n)throw new Error((t==null?void 0:t.message)||"La publicación no existe");if(n.user_id!==c)throw new Error("No tienes permiso para editar esta publicación");const{error:i}=await u.from("posts").update(e).eq("id",r);if(i)throw i;const l=this.posts.findIndex(h=>h.id===r);return l!==-1&&(this.posts[l]={...this.posts[l],...e,updated_at:new Date().toISOString()}),await this.fetchPosts(),this.posts[l]}catch(s){throw this.error=s.message,console.error("Error en updatePost:",{error:s,postId:r,currentUser:(a=authStore.user)==null?void 0:a.id,updateFields:e}),s}finally{this.loading=!1}}}});export{b as u};
